/**
 * @fileoverview Git Hooks Configuration Templates
 * @description Templates for Lefthook, lint-staged, and commit message standards
 * Includes pre-commit hooks, commit validation, and development workflow automation
 */
export declare const lefthookConfigTemplate = "# Lefthook configuration\n# See: https://github.com/evilmartians/lefthook/blob/master/docs/configuration.md\n\npre-commit:\n  parallel: true\n  commands:\n    lint-staged:\n      run: pnpm exec lint-staged\n    typecheck:\n      run: pnpm run typecheck\n      fail_text: \"Type checking failed. Please fix the errors above.\"\n\ncommit-msg:\n  commands:\n    commitlint:\n      run: pnpm exec commitlint --edit {1}\n\npre-push:\n  parallel: true\n  commands:\n    tests:\n      run: pnpm run test\n      fail_text: \"Tests failed. Please fix failing tests before pushing.\"\n    build:\n      run: pnpm run build\n      fail_text: \"Build failed. Please fix build errors before pushing.\"";
export declare const lintStagedConfigTemplate = "{\n  \"**/*.{js,jsx,ts,tsx,json,css,md}\": [\n    \"biome format --write\"\n  ],\n  \"**/*.{js,jsx,ts,tsx}\": [\n    \"biome lint --apply-unsafe\",\n    \"biome check --apply\"\n  ],\n  \"**/*.{ts,tsx}\": [\n    \"bash -c 'pnpm run typecheck'\"\n  ]\n}";
export declare const commitlintConfigTemplate = "module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'build',\n        'chore',\n        'ci',\n        'docs',\n        'feat',\n        'fix',\n        'perf',\n        'refactor',\n        'revert',\n        'style',\n        'test',\n      ],\n    ],\n    'subject-case': [2, 'never', ['start-case', 'pascal-case', 'upper-case']],\n    'subject-empty': [2, 'never'],\n    'subject-full-stop': [2, 'never', '.'],\n    'subject-max-length': [2, 'always', 50],\n    'body-max-line-length': [2, 'always', 72],\n    'footer-max-line-length': [2, 'always', 72],\n  },\n};";
export declare const commitizenConfigTemplate = "{\n  \"path\": \"cz-conventional-changelog\",\n  \"maxHeaderWidth\": 50,\n  \"maxLineWidth\": 72,\n  \"defaultType\": \"\",\n  \"defaultScope\": \"\",\n  \"defaultSubject\": \"\",\n  \"defaultBody\": \"\",\n  \"defaultIssues\": \"\",\n  \"types\": {\n    \"feat\": {\n      \"description\": \"A new feature\",\n      \"title\": \"Features\"\n    },\n    \"fix\": {\n      \"description\": \"A bug fix\",\n      \"title\": \"Bug Fixes\"\n    },\n    \"docs\": {\n      \"description\": \"Documentation only changes\",\n      \"title\": \"Documentation\"\n    },\n    \"style\": {\n      \"description\": \"Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\",\n      \"title\": \"Styles\"\n    },\n    \"refactor\": {\n      \"description\": \"A code change that neither fixes a bug nor adds a feature\",\n      \"title\": \"Code Refactoring\"\n    },\n    \"perf\": {\n      \"description\": \"A code change that improves performance\",\n      \"title\": \"Performance Improvements\"\n    },\n    \"test\": {\n      \"description\": \"Adding missing tests or correcting existing tests\",\n      \"title\": \"Tests\"\n    },\n    \"build\": {\n      \"description\": \"Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)\",\n      \"title\": \"Builds\"\n    },\n    \"ci\": {\n      \"description\": \"Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\",\n      \"title\": \"Continuous Integrations\"\n    },\n    \"chore\": {\n      \"description\": \"Other changes that don't modify src or test files\",\n      \"title\": \"Chores\"\n    },\n    \"revert\": {\n      \"description\": \"Reverts a previous commit\",\n      \"title\": \"Reverts\"\n    }\n  }\n}";
export declare const vscodeTasksTemplate = "{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"dev\",\n      \"type\": \"shell\",\n      \"command\": \"pnpm\",\n      \"args\": [\"dev\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"build\",\n      \"type\": \"shell\",\n      \"command\": \"pnpm\",\n      \"args\": [\"build\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"test\",\n      \"type\": \"shell\",\n      \"command\": \"pnpm\",\n      \"args\": [\"test\"],\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"test:e2e\",\n      \"type\": \"shell\",\n      \"command\": \"pnpm\",\n      \"args\": [\"test:e2e\"],\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"lint\",\n      \"type\": \"shell\",\n      \"command\": \"pnpm\",\n      \"args\": [\"lint\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"typecheck\",\n      \"type\": \"shell\",\n      \"command\": \"pnpm\",\n      \"args\": [\"typecheck\"],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    }\n  ]\n}";
export declare const githubWorkflowTemplate = "name: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: '20'\n        cache: 'pnpm'\n\n    - name: Install pnpm\n      run: npm install -g pnpm\n\n    - name: Install dependencies\n      run: pnpm install\n\n    - name: Type check\n      run: pnpm run typecheck\n\n    - name: Lint\n      run: pnpm run lint\n\n    - name: Run unit tests\n      run: pnpm run test\n\n    - name: Build\n      run: pnpm run build\n\n    - name: Install Playwright Browsers\n      run: pnpm exec playwright install --with-deps\n\n    - name: Run Playwright tests\n      run: pnpm run test:e2e\n\n    - uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: playwright-report\n        path: playwright-report/\n        retention-days: 30";
//# sourceMappingURL=git-hooks-templates.d.ts.map