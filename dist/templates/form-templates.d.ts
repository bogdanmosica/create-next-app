/**
 * @fileoverview Form Handling Templates
 * @description Templates for React Hook Form setup and form utilities
 * Includes form hooks, validation helpers, and example components
 */
export declare const formHooksTemplate = "import React from \"react\";\nimport { z } from \"zod\";\nimport { useForm, UseFormReturn, DefaultValues } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\n/**\n * Generic form hook with Zod validation\n * TODO: Fix typing issues with React Hook Form + Zod resolver\n */\n// export function useZodForm<T extends z.ZodSchema<any>>(\n//   schema: T,\n//   defaultValues?: Partial<z.infer<T>>\n// ) {\n//   return useForm<z.infer<T>>({\n//     resolver: zodResolver(schema),\n//     defaultValues,\n//   });\n// }\n\n/**\n * Form state hook for server actions\n */\nexport function useFormState<T>(\n  action: (prevState: T, formData: FormData) => Promise<T>,\n  initialState: T\n): [T, (formData: FormData) => void] {\n  const [state, setState] = React.useState<T>(initialState);\n  const [isPending, startTransition] = React.useTransition();\n\n  const dispatch = React.useCallback(\n    (formData: FormData) => {\n      startTransition(async () => {\n        const newState = await action(state, formData);\n        setState(newState);\n      });\n    },\n    [action, state]\n  );\n\n  return [state, dispatch];\n}";
export declare const formUtilsTemplate = "import { z } from \"zod\";\nimport { FieldError, FieldErrors, FieldValues } from \"react-hook-form\";\n\n/**\n * Extract error message from React Hook Form field error\n */\nexport function getErrorMessage(error: FieldError | undefined): string | undefined {\n  return error?.message;\n}\n\n/**\n * Check if form has any errors\n */\nexport function hasFormErrors<T extends FieldValues>(errors: FieldErrors<T>): boolean {\n  return Object.keys(errors).length > 0;\n}\n\n/**\n * Get all error messages from form\n */\nexport function getFormErrorMessages<T extends FieldValues>(errors: FieldErrors<T>): string[] {\n  return Object.values(errors)\n    .map((error) => getErrorMessage(error as FieldError))\n    .filter(Boolean) as string[];\n}\n\n/**\n * Common validation schemas\n */\nexport const validationSchemas = {\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: (password: string) =>\n    z.string().refine((val) => val === password, {\n      message: \"Passwords do not match\",\n    }),\n  required: (field: string) => z.string().min(1, `${field} is required`),\n  optionalString: z.string().optional(),\n  url: z.string().url(\"Please enter a valid URL\"),\n  phone: z.string().regex(/^\\+?[1-9]\\d{1,14}$/, \"Please enter a valid phone number\"),\n};";
export declare const formComponentTemplate = "\"use client\";\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\ntype ContactFormValues = z.infer<typeof contactFormSchema>;\n\ninterface ContactFormProps {\n  onSubmit: (values: ContactFormValues) => Promise<void>;\n  isLoading?: boolean;\n}\n\nexport function ContactForm({ onSubmit, isLoading }: ContactFormProps) {\n  const form = useForm<ContactFormValues>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n    },\n  });\n\n  const handleSubmit = async (values: ContactFormValues) => {\n    try {\n      await onSubmit(values);\n      form.reset();\n    } catch (error) {\n      console.error(\"Form submission error:\", error);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Your name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" placeholder=\"your@email.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"message\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Message</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Your message...\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Tell us what you'd like to discuss.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <Button type=\"submit\" disabled={isLoading || form.formState.isSubmitting}>\n          {isLoading || form.formState.isSubmitting ? \"Sending...\" : \"Send Message\"}\n        </Button>\n      </form>\n    </Form>\n  );\n}";
//# sourceMappingURL=form-templates.d.ts.map