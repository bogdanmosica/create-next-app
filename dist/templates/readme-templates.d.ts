export declare const actionsReadmeTemplate = "## Example of action \n\n> File name example `./user.ts`; we will take user as example, it can be anything, post, to do, article.\n```typescript\n'use server'\nimport { db } from '@/lib/db' // Your database client\n\nimport { UserModel } from '@/types' // Your types folder\n \nexport async function createUser(data: UserModel) {\n  const user = await db.user.create({ data })\n  return user\n}\n```\n\n\n```typescript\n'use server'\nimport { db } from '@/lib/db'\n \nexport async function fetchUsers() {\n  const users = await db.user.findMany()\n  return users\n}\n``` \n> and how to use it:\n```jsx\n'use client'\nimport { fetchUsers } from '@/actions';\nimport { Button } from '@/components/ui/button';\n \nexport default function MyButton() {\n  return <Button onClick={() => fetchUsers()}>Fetch Users</Button>\n}\n```";
export declare const componentsReadmeTemplate = "## Example use of a Shadcn component:\n\n```jsx\n\"use client\";\n\nimport { useState } from \"react\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst ObjectType = {\n  Age: \"age\",\n  Sex: \"sex\",\n  Country: \"country\",\n} as const;\n\nconst selectOptions = [\n  { label: \"Age\", value: ObjectType.Age },\n  { label: \"Sex\", value: ObjectType.Sex },\n  { label: \"Country\", value: ObjectType.Country },\n];\n\nexport function SelectExample() {\n  const [selected, setSelected] = useState(\"\");\n\n  return (\n    <Select value={selected} onValueChange={setSelected}>\n      <SelectTrigger>\n        <SelectValue placeholder=\"Select an option\" />\n      </SelectTrigger>\n      <SelectContent>\n        {selectOptions.map((option) => (\n          <SelectItem key={option.value} value={option.value}>\n            {option.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n```\n> **IMPORTANT** if a constant like `ObjectType` in this example is used across all the other components it should be saved under `lib/constants/object-type.ts` in our case, that goes for any other constants.";
export declare const libReadmeTemplate = "## Lib folder structure\n\nThis folder contains utility functions, constants, and configurations.\n\n### Constants\nStore shared constants in `lib/constants/` folder. For example:\n- `lib/constants/object-type.ts` - Object type enums\n- `lib/constants/api-endpoints.ts` - API endpoint constants\n\n### Database\n- `lib/db/` - Database configuration and schema files\n- `lib/db/schema.ts` - Drizzle schema definitions\n- `lib/db/migrations/` - Database migration files\n\n### Utils\n- `lib/utils.ts` - Utility functions (created by shadcn)\n- `lib/validations.ts` - Validation schemas (Zod recommended)";
export declare const libDbReadmeTemplate = "> The folder structure and code split I expect.\n\uD83D\uDCC2 db\n    \u2514 \uD83D\uDCC2 schema\n      \u251C \uD83D\uDCDC users.sql.ts\n      \u251C \uD83D\uDCDC common.sql.ts\n      \u251C \uD83D\uDCDC cities.sql.ts\n      \u251C \uD83D\uDCDC products.sql.ts\n      \u251C \uD83D\uDCDC clients.sql.ts\n      \u2514 \uD83D\uDCDC schema.ts\n\n## Common timestamps example (common.sql.ts)\n\n```typescript\nexport const timestamps = {\n  updated_at: timestamp(),\n  created_at: timestamp().defaultNow().notNull(),\n  deleted_at: timestamp(),\n}\n```\n\n> and to use:\n\n```typescript\n// users.sql.ts\nexport const users = pgTable('users', {\n  id: integer(),\n  ...timestamps\n})\n```";
//# sourceMappingURL=readme-templates.d.ts.map