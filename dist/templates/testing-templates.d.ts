/**
 * @fileoverview Testing Configuration Templates
 * @description Templates for Vitest, Playwright, and testing utilities setup
 * Includes configuration files, test utilities, and example tests
 */
export declare const vitestConfigTemplate = "/// <reference types=\"vitest\" />\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: \"jsdom\",\n    setupFiles: [\"./tests/setup.ts\"],\n    globals: true,\n    css: true,\n  },\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./\"),\n    },\n  },\n});";
export declare const vitestSetupTemplate = "import \"@testing-library/jest-dom\";\nimport { beforeAll, afterEach, afterAll } from \"vitest\";\nimport { server } from \"./mocks/server\";\n\n// Start server before all tests\nbeforeAll(() => server.listen({ onUnhandledRequest: \"error\" }));\n\n// Reset any request handlers that we may add during the tests,\n// so they don't affect other tests.\nafterEach(() => server.resetHandlers());\n\n// Clean up after the tests are finished.\nafterAll(() => server.close());";
export declare const testUtilsTemplate = "import React, { ReactElement } from \"react\";\nimport { render, RenderOptions } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\n\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, \"wrapper\">\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\nexport * from \"@testing-library/react\";\nexport { customRender as render, userEvent };";
export declare const mswHandlersTemplate = "import { http, HttpResponse } from \"msw\";\n\nexport const handlers = [\n  // Auth endpoints\n  http.post(\"/api/auth/login\", () => {\n    return HttpResponse.json({\n      user: {\n        id: \"1\",\n        email: \"test@example.com\",\n        name: \"Test User\",\n      },\n      token: \"mock-jwt-token\",\n    });\n  }),\n\n  http.post(\"/api/auth/register\", () => {\n    return HttpResponse.json({\n      user: {\n        id: \"2\",\n        email: \"new@example.com\",\n        name: \"New User\",\n      },\n      token: \"mock-jwt-token\",\n    });\n  }),\n\n  // API endpoints\n  http.get(\"/api/user\", () => {\n    return HttpResponse.json({\n      id: \"1\",\n      email: \"test@example.com\",\n      name: \"Test User\",\n    });\n  }),\n];";
export declare const mswServerTemplate = "import { setupServer } from \"msw/node\";\nimport { handlers } from \"./handlers\";\n\nexport const server = setupServer(...handlers);";
export declare const playwrightConfigTemplate = "import { defineConfig, devices } from \"@playwright/test\";\n\n/**\n * @see https://playwright.dev/docs/test-configuration\n */\nexport default defineConfig({\n  testDir: \"./tests/e2e\",\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: \"html\",\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    baseURL: \"http://127.0.0.1:3000\",\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: \"on-first-retry\",\n  },\n\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: \"chromium\",\n      use: { ...devices[\"Desktop Chrome\"] },\n    },\n\n    {\n      name: \"firefox\",\n      use: { ...devices[\"Desktop Firefox\"] },\n    },\n\n    {\n      name: \"webkit\",\n      use: { ...devices[\"Desktop Safari\"] },\n    },\n\n    /* Test against mobile viewports. */\n    // {\n    //   name: 'Mobile Chrome',\n    //   use: { ...devices['Pixel 5'] },\n    // },\n    // {\n    //   name: 'Mobile Safari',\n    //   use: { ...devices['iPhone 12'] },\n    // },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n\n  /* Run your local dev server before starting the tests */\n  webServer: {\n    command: \"pnpm dev\",\n    url: \"http://127.0.0.1:3000\",\n    reuseExistingServer: !process.env.CI,\n  },\n});";
export declare const sampleUnitTestTemplate = "import { describe, it, expect, vi } from \"vitest\";\nimport { render, screen, userEvent } from \"@/tests/test-utils\";\nimport { Button } from \"@/components/ui/button\";\n\ndescribe(\"Button\", () => {\n  it(\"renders correctly\", () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole(\"button\", { name: \"Click me\" })).toBeInTheDocument();\n  });\n\n  it(\"handles click events\", async () => {\n    const handleClick = vi.fn();\n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    await userEvent.click(screen.getByRole(\"button\", { name: \"Click me\" }));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"can be disabled\", () => {\n    render(<Button disabled>Click me</Button>);\n    expect(screen.getByRole(\"button\", { name: \"Click me\" })).toBeDisabled();\n  });\n});";
export declare const sampleE2ETestTemplate = "import { test, expect } from \"@playwright/test\";\n\ntest.describe(\"Authentication\", () => {\n  test(\"should allow user to login\", async ({ page }) => {\n    await page.goto(\"/login\");\n\n    // Fill in the login form\n    await page.fill('[name=\"email\"]', \"test@example.com\");\n    await page.fill('[name=\"password\"]', \"password123\");\n    await page.click('[type=\"submit\"]');\n\n    // Should redirect to dashboard\n    await expect(page).toHaveURL(\"/dashboard\");\n    \n    // Should display user info\n    await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n  });\n\n  test(\"should allow user to register\", async ({ page }) => {\n    await page.goto(\"/register\");\n\n    // Fill in the registration form\n    await page.fill('[name=\"name\"]', \"New User\");\n    await page.fill('[name=\"email\"]', \"newuser@example.com\");\n    await page.fill('[name=\"password\"]', \"password123\");\n    await page.fill('[name=\"confirmPassword\"]', \"password123\");\n    await page.click('[type=\"submit\"]');\n\n    // Should redirect to dashboard\n    await expect(page).toHaveURL(\"/dashboard\");\n    \n    // Should display welcome message\n    await expect(page.locator(\"text=Welcome, New User\")).toBeVisible();\n  });\n\n  test(\"should handle login errors\", async ({ page }) => {\n    await page.goto(\"/login\");\n\n    // Fill in invalid credentials\n    await page.fill('[name=\"email\"]', \"invalid@example.com\");\n    await page.fill('[name=\"password\"]', \"wrongpassword\");\n    await page.click('[type=\"submit\"]');\n\n    // Should display error message\n    await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible();\n    await expect(page.locator(\"text=Invalid credentials\")).toBeVisible();\n  });\n});";
//# sourceMappingURL=testing-templates.d.ts.map