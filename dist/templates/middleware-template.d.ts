export declare const middlewareTemplate = "import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { signToken, verifyToken } from '@/lib/auth/session';\n\nconst protectedRoutes = '/dashboard';\n\nexport async function middleware(request: NextRequest) {\n const { pathname } = request.nextUrl;\n const sessionCookie = request.cookies.get('session');\n const isProtectedRoute = pathname.startsWith(protectedRoutes);\n\n if (isProtectedRoute && !sessionCookie) {\n return NextResponse.redirect(new URL('/sign-in', request.url));\n }\n\n let res = NextResponse.next();\n\n if (sessionCookie && request.method === 'GET') {\n try {\n const parsed = await verifyToken(sessionCookie.value);\n const expiresInOneDay = new Date(Date.now() + 24 * 60 * 60 * 1000);\n\n res.cookies.set({\n name: 'session',\n value: await signToken({\n ...parsed,\n expires: expiresInOneDay.toISOString()\n }),\n httpOnly: true,\n secure: true,\n sameSite: 'lax',\n expires: expiresInOneDay\n });\n } catch (error) {\n console.error('Error updating session:', error);\n res.cookies.delete('session');\n if (isProtectedRoute) {\n return NextResponse.redirect(new URL('/sign-in', request.url));\n }\n }\n }\n\n return res;\n}\n\nexport const config = {\n matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\n runtime: 'nodejs'\n};";
//# sourceMappingURL=middleware-template.d.ts.map